import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class CoolFunction {
    public int[] restore(int[] values) {
        final int n = values.length;
        if (0 == n)
            return new int[0];
        int[] dif = new int[n - 1];
        int k = Integer.MIN_VALUE;
        int min = values[0];
        for (int i = 0; i < n - 1; ++i) {
            dif[i] = values[i + 1] - values[i];
            k = Math.max(k, Math.abs(dif[i]));
            min = Math.min(min, values[i + 1]);
        }
        if (0 > min)
            return null;
        if (1 == n)
            return new int[] { -values[0] };
        if (0 == k) {
            int[] res = trycool(values, n, dif, 1);
            if (null == res) {
                res = trycool(values, n, dif, 2);
            }
            return res;
        }
        final int[] res = trycool(values, n, dif, k);
        return res;
    }

    /**
     * @param values
     * @param n
     * @param dif
     * @param k
     * @return
     */
    private int[] trycool(int[] values, final int n, int[] dif, int k) {
        int res[] = new int[k];
        int assigned = 0;
        for (int i = 0; i < n - 1; ++i) {
            int wantassigned = (dif[i] + k) / 2;
            for (; assigned < wantassigned; ++assigned)
                res[assigned] = i;
        }
        for (; assigned < k; ++assigned)
            res[assigned] = n - 1;
        int val = 0;
        for (int i = 0; i < k; ++i)
            val += Math.abs(res[i]);
        int rest = values[0] - val;
        if (0 > rest)
            return null;
        if (0 < rest) {
            if (0 == res[0]) {
                res[0] -= rest;
            } else if (n - 1 == res[k - 1]) {
                res[k - 1] += rest;
            } else {
                int res1[] = new int[res.length+2];
                res1[0] = n-1-rest;
                res1[res.length+1] = n-1;
                for (int i = 0; i < res.length; i++) {
                    res1[i+1]=res[i];
                }
                res = res1;
            }
        }
        if (n > 1) {
            val = 0;
            for (int i = 0; i < res.length; ++i)
                val += Math.abs(res[i] - 1);
            if (val != values[1])
                return null;
        }
        return res;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0,
            boolean hasAnswer, int[] p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        CoolFunction obj;
        int[] answer;
        obj = new CoolFunction();
        long startTime = System.currentTimeMillis();
        answer = obj.restore(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0
                + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p1.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p1[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p1.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p1[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;

        // ----- test 0 -----
        p0 = new int[] { 50,0,50 };
        p1 = new int[] { 0 };
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = new int[] { 0 };
        p1 = new int[] { 0 };
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] { 50 };
        p1 = new int[] { -50 };
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] { 2, 4 };
        p1 = new int[] { -2, 0 };
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] { 3, 3 };
        p1 = new int[] { -2, 1 };
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] { 5, 1 };
        p1 = new int[] { 1, 1, 1, 2 };
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new int[] { 10, 4, 6 };
        p1 = new int[] { 1, 1, 1, 1, 2, 4 };
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out
                    .println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
