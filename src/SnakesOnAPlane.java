import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

import net.stoerr.topcoder.AbstractGraph;

/**
 * Completely wrong so far.
 * @author hps
 *
 */
public class SnakesOnAPlane {
    public int snakes(String[] grid) {
        SnakePlane g = new SnakePlane(grid);
        final Collection<Collection<String>> partitions = g.partitions();
        int res = 0;
        for (final Collection<String> p : partitions) {
            int ends = 0;
            for (String n : p) {
                int ns = g.neighbors(n).size();
                switch (ns) {
                case 1:
                    ends += 1;
                    if (!g.border(n))
                        return -1;
                    break;
                case 2:
                    break;
                case 3:
                    if (!g.border(n))
                        return -1;
                    ends += 1;
                    break;
                case 4:
                    ends += 2;
                    break;
                }
            }
            if (0 == ends)
                ends = 2;
            res += ends / 2;
        }
        return res;
    }

    static class SnakePlane extends AbstractGraph<String> {
        private final String[] grid;

        private final int width;

        SnakePlane(String[] grid) {
            this.grid = grid;
            this.width = grid[0].length();
        }

        public boolean border(String n) {
            String[] coord = n.split(";");
            int x = Integer.parseInt(coord[0]);
            int y = Integer.parseInt(coord[1]);
            return 0 == x || width - 1 == x || 0 == y || grid.length - 1 == y;
        }

        @Override
        public Collection<String> neighbors(String node) {
            Collection<String> res = new ArrayList<String>();
            String[] coord = node.split(";");
            int x = Integer.parseInt(coord[0]);
            int y = Integer.parseInt(coord[1]);
            if (isNode(x - 1, y))
                res.add(toNode(x - 1, y));
            if (isNode(x + 1, y))
                res.add(toNode(x + 1, y));
            if (isNode(x, y - 1))
                res.add(toNode(x, y - 1));
            if (isNode(x, y + 1))
                res.add(toNode(x, y + 1));
            return res;
        }

        @Override
        public Collection<String> nodes() {
            Collection<String> res = new ArrayList<String>();
            for (int x = 0; x < width; ++x) {
                for (int y = 0; y < grid.length; ++y) {
                    if (isNode(x, y)) {
                        res.add(toNode(x, y));
                    }
                }
            }
            return res;
        }

        private String toNode(int x, int y) {
            return x + ";" + y;
        }

        private boolean isNode(int x, int y) {
            if (0 > x || width <= x || 0 > y || grid.length <= y)
                return false;
            final char c = grid[y].charAt(x);
            final boolean isNode = '.' == c;
            return isNode;
        }
    };

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0,
            boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        SnakesOnAPlane obj;
        int answer;
        obj = new SnakesOnAPlane();
        long startTime = System.currentTimeMillis();
        answer = obj.snakes(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0
                + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new String[] { "......", ".#.##.", ".#....", "....#.", ".##.#.",
                "......" };
        p1 = 2;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] { "###.###", "###.###", ".......", "###.###",
                "###.###" };
        p1 = -1;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] { "#.....##", "...#....", "........", "..#.#.#.",
                "......#.", "...#..#.", "#......." };
        p1 = 1;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] { "###########", "#......#...", "#.####.#...",
                "#.#..#.####", "#.#..#.####", "#.####.#..#", "#......#..#",
                "###########" };
        p1 = 0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] { "####.######", "#.........#", "..........#",
                "#..........", "#.........#", "#####.#####" };
        p1 = -1;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new String[] { "##", "#." };
        p1 = -1;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = new String[] { ".", "." };
        p1 = 1;
        all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
        // ------------------

        // ----- test 7 -----
        p0 = new String[] { "#" };
        p1 = 0;
        all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out
                    .println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
