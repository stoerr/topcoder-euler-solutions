import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class BirthdayCake {
    
    int numbits(long val) {
        int ct = 0;
        while(0 != val) {
            ct += val&1;
            val >>= 1;
        }
        return ct;
    }

    public int howManyFriends(String[] af, String[] fd, int K) {
        Map<String, Integer> m = new HashMap();
        int curr = 0;
        for(int i = 0; i < af.length; ++i) {
            m.put(af[i], curr++);
        }
        List<Long> v = new ArrayList();
        for(int i =0; i< fd.length; ++i) {
            long mask = 0;
            String[] sp = fd[i].split(" ");
            for(String st : sp) {
                Integer val = m.get(st);
                if (null != val) {
                    mask |= 1 << val;
                }
            }
            v.add(mask);
        }
        int n = fd.length;
        int res = 0;
        for (int i = 0; i < (1<<n); ++i) {
            long currmask = 0;
            for (int j = 0; j < n; j++) {
                if(0 == (i&(1<<j))) {
                    currmask |= v.get(j);
                }
            }
            if (curr - numbits(currmask) >= K) {
                res = Math.max(res, numbits(i));
            }
        }
        return res;
    }
    
    public int howManyFriendsM(String[] availableFruits,
            String[] friendsDislikings, int K) {
        String[] selection = new String[K];
        Set<String>[] dislikings = new Set[friendsDislikings.length];
        for (int i = 0; i < dislikings.length; i++) {
            String[] spl = friendsDislikings[i].split(" ");
            final HashSet<String> set = new HashSet<String>();
            dislikings[i] = set;
            set.addAll(Arrays.asList(spl));
        }
        int res = select(availableFruits, 0, K, selection, dislikings);
        return res;
    }

    private int select(String[] availableFruits, int i, int k,
            String[] selection, Set<String>[] dislikings) {
        if (availableFruits.length - i < k)
            return 0;
        if (k == 0) {
            // System.out.println(Arrays.asList(selection));
            return countfriends(selection, dislikings);
        }
        selection[k - 1] = null;
        int eat1 = select(availableFruits, i + 1, k, selection,
                dislikings);
        selection[k - 1] = availableFruits[i];
        int eat2 = select(availableFruits, i + 1, k - 1, selection,
                dislikings);
        return Math.max(eat1, eat2);
    }

    private int countfriends(String[] selection, Set<String>[] dislikings) {
        int res = 0;
        for (int i = 0; i < dislikings.length; i++) {
            boolean ok = true;
            for (int f = 0; f < selection.length; f++) {
                String sel = selection[f];
                if (dislikings[i].contains(sel)) {
                    ok = false;
                    break;
                }
            }
            if (ok)
                res++;
        }
        return res;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0,
            String[] p1, int p2, boolean hasAnswer, int p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p1[i] + "\"");
        }
        System.out.print("}" + "," + p2);
        System.out.println("]");
        BirthdayCake obj;
        int answer;
        obj = new BirthdayCake();
        long startTime = System.currentTimeMillis();
        answer = obj.howManyFriends(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0
                + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        String[] p1;
        int p2;
        int p3;

        // ----- test 2 -----
        /*
        p0 = new String[] {"vqayzaldyi", "qlgsukdmfe", "baewytlvfh", "eeqrrjsie", "olfnklc", "itfxtfgykb", "ntlhit", "korzk", "rbamtmo", "docur", "hllpve", "jdplceqcc", "mankgl", "fwthcv", "jdodyv", "zfifjpc", "wydhboirp", "duracx", "lcdwaalr", "adiffpyvx", "ctfxai", "jablas", "lcqkulmvb", "wcabop", "ajsynuc", "cqmaqngsfs", "xkeoczhzd", "pxomu", "dyygo", "jkmagcj", "ijtfgc", "mjrdfcxhpu", "xdfkjd", "torelq", "wdibtt", "dsqvv", "lwlyzv", "lynygya", "auqviptooe", "ojfhhv", "uuukzppfb"};
        p1 = new String[] {"mankgl ntlhit auqviptooe itfxtfgykb jablas", "mankgl hllpve olfnklc vqayzaldyi docur fwthcv", "eeqrrjsie wdibtt auqviptooe jdplceqcc ctfxai", "wdibtt dsqvv dyygo wcabop adiffpyvx xdfkjd zfifjpc", "ntlhit dyygo baewytlvfh ojfhhv jkmagcj korzk", "jdplceqcc ajsynuc uuukzppfb jdodyv mankgl ntlhit", "pxomu baewytlvfh wdibtt vqayzaldyi wydhboirp", "mjrdfcxhpu cqmaqngsfs olfnklc docur ctfxai jablas", "xkeoczhzd ctfxai rbamtmo ojfhhv lcqkulmvb", "jablas lcqkulmvb auqviptooe lwlyzv zfifjpc dsqvv", "docur hllpve dsqvv itfxtfgykb vqayzaldyi", "uuukzppfb hllpve ojfhhv dyygo xdfkjd ctfxai", "torelq baewytlvfh eeqrrjsie jablas wydhboirp", "itfxtfgykb olfnklc jdplceqcc mjrdfcxhpu auqviptooe", "jablas duracx fwthcv olfnklc lcqkulmvb wdibtt", "dsqvv vqayzaldyi wydhboirp itfxtfgykb hllpve korzk", "lcqkulmvb eeqrrjsie ntlhit dsqvv itfxtfgykb hllpve", "xkeoczhzd docur adiffpyvx ijtfgc mjrdfcxhpu fwthcv", "uuukzppfb ctfxai mankgl rbamtmo jdplceqcc docur", "mjrdfcxhpu jablas korzk baewytlvfh ijtfgc torelq"};
        p2 = 20;
        p3 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right; */
        // ------------------

        // ----- test 0 -----
        p0 = new String[] { "apple", "orange", "strawberry", "cherry" };
        p1 = new String[] { "apple orange", "apple cherry",
                "strawberry orange", "cherry", "apple" };
        p2 = 2;
        p3 = 3;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = new String[] { "appleorange", "orange", "strawberry", "cherry" };
        p1 = new String[] { "appleorange orange", "appleorange cherry",
                "strawberry orange", "cherry", "appleorange" };
        p2 = 2;
        p3 = 3;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] { "strawberry", "orange", "apple", "lemon",
                "watermelon" };
        p1 = new String[] { "orange", "apple", "lemon", "watermelon" };
        p2 = 1;
        p3 = 4;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] { "apple", "orange" };
        p1 = new String[] { "strawberry" };
        p2 = 2;
        p3 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] { "apple" };
        p1 = new String[] { "pineapple" };
        p2 = 1;
        p3 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out
                    .println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
